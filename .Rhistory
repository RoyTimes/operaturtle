library(dplyr)
library(ggplot2)
library(tidyr)
library(jpeg)
library(data.table)
library(devtools)
library(gganimate)
library(magick)
library(grid)
data.in <- read.csv("data/f_miramar.csv") %>%
filter(data.in, map_id == "MIRAMAR")
setwd("~/INFO 201/FINAL FOR REAL/operaturtle")
data.in <- read.csv("data/f_miramar.csv") %>%
filter(data.in, map_id == "MIRAMAR")
img <- readJPEG("media/JPEG/miramar.jpg")
data.players <- data.frame("Player" = paste0("Player: ", c(0:99)))
# The x coordinates are flipped in the data set thus we flip them around.
data.victim.x <- select(data.in, contains("x")) %>%
select(contains("victim")) %>%
gather(Player, victim_x, deaths_0_victim_position_x:deaths_9_victim_position_x) %>%
mutate(victim_x = round(1000 - victim_x / 800000 * 1000))
?round
data.in <- read.csv("data/f_miramar.csv") %>%
filter(data.in, map_id == "MIRAMAR")
data.in <- filter(data.in, map_id == "MIRAMAR")
data.in <- read.csv("data/f_miramar.csv")
data.in <- filter(data.in, map_id == "MIRAMAR")
img <- readJPEG("media/JPEG/miramar.jpg")
data.players <- data.frame("Player" = paste0("Player: ", c(0:99)))
# The x coordinates are flipped in the data set thus we flip them around.
data.victim.x <- select(data.in, contains("x")) %>%
select(contains("victim")) %>%
gather(Player, victim_x, deaths_0_victim_position_x:deaths_9_victim_position_x) %>%
mutate(victim_x = round(1000 - victim_x / 800000 * 1000))
?round
data.victim.y <- select(data.in, contains("y")) %>%
select(contains("victim")) %>%
gather(Player, victim_y, deaths_0_victim_position_y:deaths_9_victim_position_y) %>%
mutate(victim_y = round(victim_y / 800000 * 1000))
# Storing Killer position Data.
data.killer.x <-  select(data.in, contains("x")) %>%
select(contains("killer")) %>%
gather(Player, killer_x, deaths_0_killer_position_x:deaths_9_killer_position_x) %>%
mutate(killer_x = round(1000 - killer_x / 800000 * 1000))
# The x coordinates are flipped in the data set thus we flip them around.
data.victim.x <- select(data.in, contains("x")) %>%
select(contains("victim")) %>%
gather(Player, victim_x, deaths_0_victim_position_x:deaths_9_victim_position_x) %>%
mutate(victim_x = round(1000 - victim_x / 800000 * 1000))
data.victim.y <- select(data.in, contains("y")) %>%
select(contains("victim")) %>%
gather(Player, victim_y, deaths_0_victim_position_y:deaths_9_victim_position_y) %>%
mutate(victim_y = round(victim_y / 800000 * 1000))
# Storing Killer position Data.
data.killer.x <-  select(data.in, contains("x")) %>%
select(contains("killer")) %>%
gather(Player, killer_x, deaths_0_killer_position_x:deaths_9_killer_position_x) %>%
mutate(killer_x = round(1000 - killer_x / 800000 * 1000))
data.killer.y <- select(data.in, contains("y")) %>%
select(contains("killer")) %>%
gather(Player, killer_y, deaths_0_killer_position_y:deaths_9_killer_position_y) %>%
mutate(killer_y = round(killer_y / 800000 * 1000))
# Storing Time Data in seconds
data.time <- select(data.in, contains("time")) %>%
gather(Player, time, deaths_0_time_event:deaths_9_time_event) %>%
mutate(time = ceiling(time / 60))
# Storing weapon used.
data.weapon <- select(data.in, contains("description")) %>%
gather(Player, weapon, deaths_0_description:deaths_9_description)
data.weapon$type[data.weapon$weapon %in% c('AWM','M24','Kar98k','Win94','Mk14','SLR','SKS','Mini14','VSS')] <- "Sniper & DMR"
data.weapon$type[data.weapon$weapon %in% c('Groza','AKM','DP-28','M249','AUG','M16A4','M416','SCAR-L')] <- "AR & LMG"
data.weapon$type[data.weapon$weapon %in% c('TommyGun','UMP9','Vector','UZI', 'MicroUZI')] <- "SMG"
data.weapon$type[data.weapon$weapon %in% c('S686','S1897','S12K')] <- "Shotgun"
data.weapon$type[data.weapon$weapon %in% c('Sawed-off','R1895','R45','P1911','P92','P18C')] <- "Pistol"
data.weapon$type[data.weapon$weapon %in% c('Crossbow','Pan','Machete','Crowbar','Sickle','Superman Punch','Punch')] <- "Melee / Other"
data.weapon$type[data.weapon$weapon %in% c('PickupTruck','Buggy','HitbyCar','Motorbike','Boat','Motorbike(SideCar)','Dacia','death.BP_PickupTruck_B_01_C','death.BP_Van_A_03_C','Uaz')] <- "Vehicle"
data.weapon$type[data.weapon$weapon %in% c('death.ProjMolotov_DamageField_C','Grenade','death.Buff_FireDOT_C','death.ProjMolotov_C')] <- "Area Damage"
data.weapon$type[data.weapon$weapon %in% c('DownandOut','Drown','RedZone','death.RedZoneBomb_C','Bluezone','Falling')] <- "Environmnent"
# Combine everything into one data frame.
data.map <- data.frame(data.victim.x, data.victim.y, data.killer.x, data.killer.y, data.time, data.weapon)
# Drop rows which contain column names
data.map <- select(data.map,
time,
victim_x, victim_y,
weapon, type,
killer_x, killer_y)
data.map <- mutate(data.map, distance = sqrt(abs((killer_x - victim_x)*(killer_x - victim_x)) +
abs((killer_y - victim_y))*(killer_y - victim_y)))
# data.map2 reduces values by:
# 1. Removing na values
# 2. Filtering for coordinates of killer/victim which are at the edge of the map.
data.map2 <- na.omit(data.map)
data.map2 <- filter(data.map2, !(victim_x == 1000 & victim_y == 0)) %>%
filter(!(killer_x == 1000 & killer_y == 0))
# binning the data into a smaller grid size.
data.bins <- data.map2
data.bins$victim_x = ceiling(data.bins$victim_x/10)
data.bins$victim_y = ceiling(data.bins$victim_y/10)
data.bins$killer_x = ceiling(data.bins$killer_x/10)
data.bins$killer_y = ceiling(data.bins$killer_y/10)
# Weapon/distance relation
data.wepdist <- select(data.map2, type, distance)
# Histogram overlaid with kernel density curve
ggplot(data.wepdist, aes(x=distance)) +
geom_histogram(binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept=mean(distance)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +# Overlay with transparent density plot
facet_wrap( ~ type, ncol = 2)
library(plotly)
# plot showing good and bad positions:
plot.weapon_d <- plotly(ggplot() +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(data = data.bins.good, aes(x = x, y = y, color = "blue", size = kill_pos)) +
xlab("X coordinate") +
ylab("Y coordinate") +
geom_point(data = data.bins.bad, aes(x = x, y = y, color = "red", size = -kill_pos)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 100)))
# Histogram overlaid with kernel density curve
ggplot(data.wepdist, aes(x=distance)) +
geom_histogram(binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept=mean(distance)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +# Overlay with transparent density plot
facet_wrap( ~ type, ncol = 2)
# Counting death/kill location at each bin.
data.bins.v <- select(data.bins, x = victim_x, y = victim_y) %>%
group_by(x, y) %>%
summarize(count_v = n())
data.bins.k <- select(data.bins, x = killer_x, y = killer_y) %>%
group_by(x, y) %>%
summarize(count_k = n())
data.bins.diff <- merge(data.bins.k, data.bins.v, by = c("x", "y"), all = TRUE)
data.bins.diff$count_k[is.na(data.bins.diff$count_k)] <- 0
data.bins.diff$count_v[is.na(data.bins.diff$count_v)] <- 0
# Calculating points of interest/not.
data.bins.diff <- mutate(data.bins.diff, kill_pos = count_k - count_v)
data.bins.diff %>% group_by(kill_pos) %>% summarize(count = n())
# Create table where good and bad points shown.
data.bins.good <- filter(data.bins.diff, kill_pos > 2)
data.bins.bad <- filter(data.bins.diff, kill_pos < -2)
# plot showing good and bad positions:
plot.weapon_d <- plotly(ggplot() +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(data = data.bins.good, aes(x = x, y = y, color = "blue", size = kill_pos)) +
xlab("X coordinate") +
ylab("Y coordinate") +
geom_point(data = data.bins.bad, aes(x = x, y = y, color = "red", size = -kill_pos)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 100)))
# plot showing good and bad positions:
plot.weapon_d <- plotly(ggplot() +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(data = data.bins.good, aes(x = x, y = y, color = "blue", size = kill_pos)) +
xlab("X coordinate") +
ylab("Y coordinate") +
geom_point(data = data.bins.bad, aes(x = x, y = y, color = "red", size = -kill_pos)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 100)))
# plot showing good and bad positions:
plot.weapon_d <- ggplot() +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(data = data.bins.good, aes(x = x, y = y, color = "blue", size = kill_pos)) +
xlab("X coordinate") +
ylab("Y coordinate") +
geom_point(data = data.bins.bad, aes(x = x, y = y, color = "red", size = -kill_pos)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 100))
plot.weapon_d
# plot showing good and bad positions:
kill.positive <- ggplot() +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(data = data.bins.good, aes(x = x, y = y, color = "blue", size = kill_pos)) +
xlab("X coordinate") +
ylab("Y coordinate") +
geom_point(data = data.bins.bad, aes(x = x, y = y, color = "red", size = -kill_pos)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 100))
# plot showing good and bad positions:
kill.positive <- ggplot() +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(data = data.bins.good, aes(x = x, y = y, color = "blue", size = kill_pos)) +
xlab("X coordinate") +
ylab("Y coordinate") +
geom_point(data = data.bins.bad, aes(x = x, y = y, color = "red", size = -kill_pos)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 100))
# Histogram overlaid with kernel density curve
plot.weapon_dist <- ggplot(data.wepdist, aes(x=distance)) +
geom_histogram(binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") +
geom_vline(aes(xintercept=mean(distance)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +# Overlay with transparent density plot
facet_wrap( ~ type, ncol = 2)
plot.weapon_dist
# plot showing good and bad positions:
plot.positive <- ggplot() +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(data = data.bins.good, aes(x = x, y = y, color = "blue", size = kill_pos)) +
xlab("X coordinate") +
ylab("Y coordinate") +
geom_point(data = data.bins.bad, aes(x = x, y = y, color = "red", size = -kill_pos)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 100)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, 100))
shiny::runApp()
source(index)
source("index.R")
source("index.R")
return(plot.positive)
runApp()
runApp()
my_ui <- fluidPage( style="padding: 0px;",  theme = shinytheme("flatly"),
navbarPage("PUBG: Data Analysis",
tabPanel("Introduction", sidebarLayout (
sidebarPanel(
h1("What is PUBG?"),
p('"PlayerUnkownâs Battlegrounds" (also noted as PUBG), is a first and third-person shooter battle royale game. It matches 100 players to be drop onto an island, and those players shall fight until only one person remains. Players are allowed to play as a team of four or two, as well as playing solo. At the beginning of the game, from an airplane, players are airdropped onto the island where they can loot towns and buildings, for weapons, ammo, armor and first-aid. A blue-zone (as shown below) will appear a few minutes later to corral players closer and closer by dealing damage to anyone that stands outside the blue-zone. Additionally, there will be supply drops coming later on in the game, in which there will be legendary items.'),
hr(style="border-color: #EEEEEE -moz-use-text-color #FFFFFF; border-style: solid none; border-width: 1px 0; margin: 18px 0;"),
h4('Dataset Source:'),
a("Download Link - Kaggle", href=""),
hr(style="border-color: #EEEEEE -moz-use-text-color #FFFFFF; border-style: solid none; border-width: 1px 0; margin: 18px 0;"),
h4("Questions to Answer:"),
p("<b>Question One:</b> Where do people die most in the game? How many deaths are caused by the limiting of the playing field as opposed to deaths by other players?")
), mainPanel(
br(),
img(src='https://i.redd.it/djzln9jnhrez.jpg', height='50%', width='50%')
)
),
br(),br(),
h4("Questions We Proposed"),
tags$ol(
tags$li(HTML("<b>Question One:</b> Where do people die most in the game? How many deaths are caused by the limiting of the playing field as opposed to deaths by other players?"), tags$ul(tags$li(HTML("An insight weâd like to get is based on your skills as a player, would you die more around these hotspots. ")))),
tags$li(HTML("<b>Question Two:</b> Is it wise for people to pick up the supply airdrop? "), tags$ul(tags$li(HTML("One strategy involved in playing the game is camping around valuable drops to lure unsuspecting players into such a zone to gain a positional advantage. ")))),
tags$li(HTML("<b>Question Three:</b>  what categories can players be divided into based on statistics such as damage done, kills, distance walked, etc. "), tags$ul(tags$li(HTML("For example, campers might walk less distance and have more damage, etc. Does adopting a particular strategy give a player a higher chance of winning? "))))
),
br(), br()
),
tabPanel("Time of Death", sidebarLayout (
sidebarPanel(
radioButtons("type", "Choose one:",
choiceNames = list(
"Killers",
"Victims",
"All"
),
choiceValues = list(
"killers", "victims", "all"
)
)
), uiOutput("plot1")
), br(),
p("Analysis", style="margin: 10px")
),
tabPanel("Cause of Death", sidebarLayout (
sidebarPanel(
radioButtons("weapon", "Choose one:",
choiceNames = list(
"Sniper & DMR",
"AR & LMG",
"SMG",
"Shotgun",
"Pistol",
"Melee / Other",
"Vehicle",
"Area Damage",
"Environment"
),
choiceValues = list(
"Sniper & DMR",
"AR & LMG",
"SMG",
"Shotgun",
"Pistol",
"Melee / Other",
"Vehicle",
"Area Damage",
"Environment"
)
)
), mainPanel(
uiOutput("plot2")
)
)
),
tabPanel("Best Locations",
sidebarLayout(
sidebarPanel(
p("This representation shows which locations have more kills than deaths (blue) or vice versa (red). The size of the dot indicates how much the difference in kills/deaths and that position is. This plot makes sense, because all the hotspots are around the high population region on the map. We can infer that specific locations, such as those with shelter, or high altitude are more likely to give the player there are advantage.")
),
mainPanel(
plotOutput("plotpositive")
)
)
)
)
)
runApp()
runApp()
my_ui <- fluidPage( style="padding: 0px;",  theme = shinytheme("flatly"),
navbarPage("PUBG: Data Analysis",
tabPanel("Introduction", sidebarLayout (
sidebarPanel(
h1("What is PUBG?"),
p('"PlayerUnkownâs Battlegrounds" (also noted as PUBG), is a first and third-person shooter battle royale game. It matches 100 players to be drop onto an island, and those players shall fight until only one person remains. Players are allowed to play as a team of four or two, as well as playing solo. At the beginning of the game, from an airplane, players are airdropped onto the island where they can loot towns and buildings, for weapons, ammo, armor and first-aid. A blue-zone (as shown below) will appear a few minutes later to corral players closer and closer by dealing damage to anyone that stands outside the blue-zone. Additionally, there will be supply drops coming later on in the game, in which there will be legendary items.'),
hr(style="border-color: #EEEEEE -moz-use-text-color #FFFFFF; border-style: solid none; border-width: 1px 0; margin: 18px 0;"),
h4('Dataset Source:'),
a("Download Link - Kaggle", href=""),
hr(style="border-color: #EEEEEE -moz-use-text-color #FFFFFF; border-style: solid none; border-width: 1px 0; margin: 18px 0;"),
h4("Questions to Answer:"),
p("<b>Question One:</b> Where do people die most in the game? How many deaths are caused by the limiting of the playing field as opposed to deaths by other players?")
), mainPanel(
br(),
img(src='https://i.redd.it/djzln9jnhrez.jpg', height='50%', width='50%')
)
),
br(),br(),
h4("Questions We Proposed"),
tags$ol(
tags$li(HTML("<b>Question One:</b> Where do people die most in the game? How many deaths are caused by the limiting of the playing field as opposed to deaths by other players?"), tags$ul(tags$li(HTML("An insight weâd like to get is based on your skills as a player, would you die more around these hotspots. ")))),
tags$li(HTML("<b>Question Two:</b> Is it wise for people to pick up the supply airdrop? "), tags$ul(tags$li(HTML("One strategy involved in playing the game is camping around valuable drops to lure unsuspecting players into such a zone to gain a positional advantage. ")))),
tags$li(HTML("<b>Question Three:</b>  what categories can players be divided into based on statistics such as damage done, kills, distance walked, etc. "), tags$ul(tags$li(HTML("For example, campers might walk less distance and have more damage, etc. Does adopting a particular strategy give a player a higher chance of winning? "))))
),
br(), br()
),
tabPanel("Time of Death", sidebarLayout (
sidebarPanel(
radioButtons("type", "Choose one:",
choiceNames = list(
"Killers",
"Victims",
"All"
),
choiceValues = list(
"killers", "victims", "all"
)
)
), uiOutput("plot1")
), br(),
p("Analysis", style="margin: 10px")
),
tabPanel("Cause of Death", sidebarLayout (
sidebarPanel(
p(" This plot displays the number of kills per death type (there are more than 20 weapons). After grouping them into specific subsets, such as vehicles, or bombs (Area Damage), we can see that in the short range, SMG's, AR weapons and shotguns have the most amount of kills. In contrast, Snipers and environment damage is more evenly distributed, which means that they function better on greater distances.")
), mainPanel(
plotOutput("plotpositive")
)
)
),
tabPanel("Best Locations",
sidebarLayout(
sidebarPanel(
p("This representation shows which locations have more kills than deaths (blue) or vice versa (red). The size of the dot indicates how much the difference in kills/deaths and that position is. This plot makes sense, because all the hotspots are around the high population region on the map. We can infer that specific locations, such as those with shelter, or high altitude are more likely to give the player there are advantage.")
),
mainPanel(
plotOutput("plotpositive")
)
)
)
)
)
