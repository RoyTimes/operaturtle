mutate(killer_y = killer_y / 800000 * 100)
# Storing Time Data.
data.time <- select(data.in, contains("time")) %>%
gather(Player, Time, deaths_0_time_event:deaths_9_time_event) %>%
mutate(Time = ceiling((Time - min(Time, na.rm=TRUE)) / (max(Time, na.rm=TRUE) - min(Time, na.rm=TRUE)) * 20))
# Storing weapon used.
data.weapon <- select(data.in, contains("description")) %>%
gather(Player, Weapon, deaths_0_description:deaths_9_description)
data.killer.y <- select(data.in, contains("y")) %>%
select(contains("killer")) %>%
gather(Player, killer_y, deaths_0_killer_position_y:deaths_9_killer_position_y) %>%
mutate(killer_y = killer_y / 800000 * 100)
# Storing Time Data in seconds
data.time <- select(data.in, contains("time")) %>%
gather(Player, Time, deaths_0_time_event:deaths_9_time_event) %>%
mutate(Time = Time / 60)
# Storing Time Data in seconds
data.time <- select(data.in, contains("time")) %>%
gather(Player, Time, deaths_0_time_event:deaths_9_time_event) %>%
mutate(Time = ceiling(Time / 60))
# Storing weapon used.
data.weapon <- select(data.in, contains("description")) %>%
gather(Player, Weapon, deaths_0_description:deaths_9_description)
data.map <- data.frame(data.victim.x, data.victim.y, data.killer.x, data.killer.y, data.time, data.weapon)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggmap)
library(jpeg)
library(data.table)
library(devtools)
#devtools::install_github("dgrtwo/gganimate")
library("gganimate")
#install.packages("magick")
library(magick)
library(grid)
data.in <- read.csv("data/f_miramar.csv")
img <- readJPEG("data/miramar.jpg")
data.players <- data.frame("Player" = paste0("Player: ", c(0:99)))
# The x coordinates are flipped in the data set thus we flip them around.
data.victim.x <- select(data.in, contains("x")) %>%
select(contains("victim")) %>%
gather(Player, victim_x, deaths_0_victim_position_x:deaths_9_victim_position_x) %>%
mutate(victim_x = 100 - victim_x / 800000 * 100)
data.victim.y <- select(data.in, contains("y")) %>%
select(contains("victim")) %>%
gather(Player, victim_y, deaths_0_victim_position_y:deaths_9_victim_position_y) %>%
mutate(victim_y = victim_y / 800000 * 100)
# Storing Killer position Data.
data.killer.x <-  select(data.in, contains("x")) %>%
select(contains("killer")) %>%
gather(Player, killer_x, deaths_0_killer_position_x:deaths_9_killer_position_x) %>%
mutate(killer_x = 100 - killer_x / 800000 * 100)
data.killer.y <- select(data.in, contains("y")) %>%
select(contains("killer")) %>%
gather(Player, killer_y, deaths_0_killer_position_y:deaths_9_killer_position_y) %>%
mutate(killer_y = killer_y / 800000 * 100)
# Storing Time Data in seconds
data.time <- select(data.in, contains("time")) %>%
gather(Player, Time, deaths_0_time_event:deaths_9_time_event) %>%
mutate(Time = ceiling(Time / 60))
# Storing weapon used.
data.weapon <- select(data.in, contains("description")) %>%
gather(Player, Weapon, deaths_0_description:deaths_9_description)
data.map <- data.frame(data.victim.x, data.victim.y, data.killer.x, data.killer.y, data.time, data.weapon)
View(data.map)
# Storing Time Data in seconds
data.time <- select(data.in, contains("time")) %>%
gather(Player, time, deaths_0_time_event:deaths_9_time_event) %>%
mutate(time = ceiling(Time / 60))
# The x coordinates are flipped in the data set thus we flip them around.
data.victim.x <- select(data.in, contains("x")) %>%
select(contains("victim")) %>%
gather(Player, victim_x, deaths_0_victim_position_x:deaths_9_victim_position_x) %>%
mutate(victim_x = 100 - victim_x / 800000 * 100)
data.victim.y <- select(data.in, contains("y")) %>%
select(contains("victim")) %>%
gather(Player, victim_y, deaths_0_victim_position_y:deaths_9_victim_position_y) %>%
mutate(victim_y = victim_y / 800000 * 100)
# Storing Killer position Data.
data.killer.x <-  select(data.in, contains("x")) %>%
select(contains("killer")) %>%
gather(Player, killer_x, deaths_0_killer_position_x:deaths_9_killer_position_x) %>%
mutate(killer_x = 100 - killer_x / 800000 * 100)
data.killer.y <- select(data.in, contains("y")) %>%
select(contains("killer")) %>%
gather(Player, killer_y, deaths_0_killer_position_y:deaths_9_killer_position_y) %>%
mutate(killer_y = killer_y / 800000 * 100)
# Storing Time Data in seconds
data.time <- select(data.in, contains("time")) %>%
gather(Player, time, deaths_0_time_event:deaths_9_time_event) %>%
mutate(time = ceiling(time / 60))
# Storing weapon used.
data.weapon <- select(data.in, contains("description")) %>%
gather(Player, Weapon, deaths_0_description:deaths_9_description)
# Combine everything into one data frame.
data.map <- data.frame(data.victim.x, data.victim.y, data.killer.x, data.killer.y, data.time, data.weapon)
# Combine everything into one data frame.
data.map <- data.frame(data.victim.x, data.victim.y, data.killer.x, data.killer.y, data.time, data.weapon)
# Drop rows which contain column names
data.map <- select(data.map,
time,
victim_x, victim_y,
weapon,
killer_x, killer_y)
# Storing weapon used.
data.weapon <- select(data.in, contains("description")) %>%
gather(Player, weapon, deaths_0_description:deaths_9_description)
# Combine everything into one data frame.
data.map <- data.frame(data.victim.x, data.victim.y, data.killer.x, data.killer.y, data.time, data.weapon)
# Drop rows which contain column names
data.map <- select(data.map,
time,
victim_x, victim_y,
weapon,
killer_x, killer_y)
View(data.map)
#View(data.map)
summary(data.map)
#View(data.map)
weapon.types <- unique(data.map$weapon)
print(weapon.types)
View(data.map)
data.map2 <-
#Heatmap
gganimate(ggplot(data.map2, aes(x = X, y = Y, frame = Time, color = Time, cumulative = TRUE)) +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(aes(frame = Time)) +
scale_color_gradientn(colours = rainbow(5)), interval = 0.2, "timeheat.gif")
data.map2 <- na.omit(data.map)
gganimate(ggplot(data.map2) +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = time, cumulative = TRUE)) +
scale_color_gradientn(colours = rainbow(5)))
killer.time.map <- gganimate(ggplot(data.map2) +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = time, cumulative = TRUE)) +
scale_color_gradientn(colours = rainbow(5)))
victim.time.map
victim.time.map
victim.time.map <- gganimate(ggplot(data.map2) +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = time, cumulative = TRUE)) +
scale_color_gradientn(colours = rainbow(5)))
victim.time.map
killer.time.map <- gganimate(ggplot(data.map2) +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = time, cumulative = TRUE)) +
scale_color_gradientn(colours = rainbow(5)))
killer.time.map
event.diff.map <- gganimate(ggplot(data.map2) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "red", alpha = 0.05, cumulative = TRUE)) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.05, cumulative = TRUE)) +
scale_color_gradientn(colours = rainbow(5)))
event.diff.map <- gganimate(ggplot(data.map2) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "red", alpha = 0.05, cumulative = TRUE)) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.05, cumulative = TRUE)))
event.diff.map
event.diff.map <- gganimate(ggplot(data.map2) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "red", alpha = 0.01, cumulative = TRUE)) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.01, cumulative = TRUE)))
event.diff.map <- gganimate(ggplot(data.map2) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "red", alpha = 0.01, cumulative = TRUE)) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.01, cumulative = TRUE)) +
theme(plot.background = element_rect(fill = "black")))
event.diff.map
event.diff.map <- gganimate(ggplot(data.map2) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "red", alpha = 0.5, cumulative = TRUE)) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.5, cumulative = TRUE)) +
theme(plot.background = element_rect(fill = "black")))
event.diff.map
event.diff.map <- gganimate(ggplot(data.map2) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "red", alpha = 0.99, cumulative = TRUE)) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.99, cumulative = TRUE)) +
theme(plot.background = element_rect(fill = "black")))
event.diff.map
event.diff.map <- gganimate(ggplot(data.map2) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "red", alpha = 0.0001, cumulative = TRUE)) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.0001, cumulative = TRUE)) +
theme(plot.background = element_rect(fill = "black")))
event.diff.map
event.diff.map <- gganimate(ggplot(data.map2) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "red", alpha = 0.000001, cumulative = TRUE)) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.000001, cumulative = TRUE)) +
theme(plot.background = element_rect(fill = "black")))
event.diff.map <- gganimate(ggplot(data.map2) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "red", alpha = 0.000001, cumulative = TRUE)) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.000001, cumulative = TRUE)) +
theme(plot.background = element_rect(fill = "black")))
event.diff.map
event.diff.map <- gganimate(ggplot(data.map2) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "red", alpha = 0.000001, cumulative = TRUE)) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.000001, cumulative = TRUE)) +
theme(plot.background = element_rect(fill = "black")) +
theme_void())
event.diff.map
event.diff.map <- gganimate(ggplot(data.map2) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "red", alpha = 0.000001, cumulative = TRUE)) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.000001, cumulative = TRUE)) +
theme_void() +
theme(plot.background = element_rect(fill = "black")))
event.diff.map
event.diff.map <- gganimate(ggplot(data.map2) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "red", alpha = 0.000001, cumulative = TRUE)) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.000001, cumulative = TRUE)) +
theme_void() +
theme(plot.background = element_rect(fill = "black")),
interval = .2)
event.diff.map
event.diff.map <- gganimate(ggplot(data.map2) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "black", alpha = 0.000001, cumulative = TRUE)) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.000001, cumulative = TRUE)) +
theme_void() +
theme(plot.background = element_rect(fill = "black")),
interval = .2)
event.diff.map
event.diff.map <- gganimate(ggplot(data.map2) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.000001, cumulative = TRUE)) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "black", alpha = 0.000001, cumulative = TRUE)) +
theme_void() +
theme(plot.background = element_rect(fill = "black")),
interval = .2)
event.diff.map
event.diff.map <- gganimate(ggplot(data.map2) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.000001, cumulative = TRUE)) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "black", alpha = 0.000001, cumulative = TRUE)) +
theme_void() +
theme(plot.background = element_rect(fill = "black")),
interval = .2)
event.diff.map
library(shiny); runApp('~/INFO 201/FINAL ACTUAL/operaturtle/UI/ui.R')
runApp('~/INFO 201/FINAL ACTUAL/operaturtle/UI/ui.R')
install.packages("shinythemes")
runApp('~/INFO 201/FINAL ACTUAL/operaturtle/UI/ui.R')
ui <- fluidPage( theme = shinytheme("flatly"),
navbarPage("Play Unknown's Battleground",
tabPanel("Introduction", sidebarLayout (
sidebarPanel(
h4("Introduction To PUBG"),
p(' "PlayerUnkownâs Battlegrounds" (also noted as PUBG), a first and third-person shooter battle royale game. It matches 100 players to be drop onto an island, and those players shall fight until only one person remains. Players are allowed to play as a team of four or two, as well as playing solo. At the beginning of the game, from an airplane, players are airdropped onto the island where they can loot towns and buildings, for weapons, ammo, armor and first-aid. A blue-zone (as shown below) will appear a few minutes later to corral players closer and closer by dealing damage to anyone that stands outside the blue-zone. Additionally, there will be supply drops coming later on in the game, in which there will be legendary items.'),
hr(style="border: 1px grey solid"),
h4('Dataset Could be Downloaded From'),
# TODO: add the link here
a("Download Link - Kaggle", href="")
), mainPanel(
br(),
img(src='https://i.redd.it/djzln9jnhrez.jpg', height='50%', width='50%')
)
),
br(),br(),
h4("Questions We Proposed"),
tags$ol(
tags$li(HTML("<b>Question One:</b> Where do people die most in the game? How many deaths are caused by the limiting of the playing field as opposed to deaths by other players?"), tags$ul(tags$li(HTML("An insight weâd like to get is based on your skills as a player, would you die more around these hotspots. ")))),
tags$li(HTML("<b>Question Two:</b> Is it wise for people to pick up the supply airdrop? "), tags$ul(tags$li(HTML("One strategy involved in playing the game is camping around valuable drops to lure unsuspecting players into such a zone to gain a positional advantage. ")))),
tags$li(HTML("<b>Question Three:</b>  what categories can players be divided into based on statistics such as damage done, kills, distance walked, etc. "), tags$ul(tags$li(HTML("For example, campers might walk less distance and have more damage, etc. Does adopting a particular strategy give a player a higher chance of winning? "))))
),
br(), br()
),
tabPanel("Time of Death", sidebarLayout (
sidebarPanel(
radioButtons("rb", "Choose one:",
choiceNames = list(
"Killers",
"Victims",
"All"
),
choiceValues = list(
"killers", "victims", "all"
)
),
textOutput("choice.kva"),br(),
hr(style="border: 1px grey solid")
), mainPanel(
h3("Place holder")
)
),
p ("Analysis")
),
tabPanel("Weapons", sidebarLayout (
sidebarPanel(
h4("Random Random")
), mainPanel(
h3("aaa")
)
))
)
)
runApp('~/INFO 201/FINAL ACTUAL/operaturtle/UI/ui.R')
gganimate(ggplot(data.map2) +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = time, cumulative = TRUE)) +
scale_color_gradientn(colours = rainbow(5)), "victim_time_heat.gif")
gganimate(ggplot(data.map2) +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = time, cumulative = TRUE)) +
scale_color_gradientn(colours = rainbow(5)), "killer_time_heat.gif")
gganimate(ggplot(data.map2) +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = time, cumulative = TRUE)) +
scale_color_gradientn(colours = rainbow(5)) +
xlab("X coordinate") +
ylab("Y coordinate") +
ggtitle("Victim Deaths Over Time"), "victim_time_heat.gif")
gganimate(ggplot(data.map2) +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = time, cumulative = TRUE)) +
scale_color_gradientn(colours = rainbow(5)) +
xlab("X coordinate") +
ylab("Y coordinate") +
ggtitle("Victim Deaths Over Time (Elapsed time (min) = "), "victim_time_heat.gif")
gganimate(ggplot(data.map2) +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = time, cumulative = TRUE)) +
scale_color_gradientn(colours = rainbow(5)), "killer_time_heat.gif")
gganimate(ggplot(data.map2) +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = time, cumulative = TRUE)) +
scale_color_gradientn(colours = rainbow(5)) +
xlab("X coordinate") +
ylab("Y coordinate") +
ggtitle("Victim Deaths Over Time || Elapsed time in minutes: "), "victim_time_heat.gif")
gganimate(ggplot(data.map2) +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = time, cumulative = TRUE)) +
scale_color_gradientn(colours = rainbow(5)) +
xlab("X coordinate") +
ylab("Y coordinate") +
ggtitle("Victim Deaths Over Time || Elapsed time in minutes: "), "killer_time_heat.gif")
ui <- fluidPage( theme = shinytheme("flatly"),
navbarPage("Play Unknown's Battleground",
tabPanel("Introduction", sidebarLayout (
sidebarPanel(
h4("Introduction To PUBG"),
p(' "PlayerUnkownâs Battlegrounds" (also noted as PUBG), a first and third-person shooter battle royale game. It matches 100 players to be drop onto an island, and those players shall fight until only one person remains. Players are allowed to play as a team of four or two, as well as playing solo. At the beginning of the game, from an airplane, players are airdropped onto the island where they can loot towns and buildings, for weapons, ammo, armor and first-aid. A blue-zone (as shown below) will appear a few minutes later to corral players closer and closer by dealing damage to anyone that stands outside the blue-zone. Additionally, there will be supply drops coming later on in the game, in which there will be legendary items.'),
hr(style="border: 1px grey solid"),
h4('Dataset Could be Downloaded From'),
# TODO: add the link here
a("Download Link - Kaggle", href="")
), mainPanel(
br(),
img(src='https://i.redd.it/djzln9jnhrez.jpg', height='50%', width='50%')
)
),
br(),br(),
h4("Questions We Proposed"),
tags$ol(
tags$li(HTML("<b>Question One:</b> Where do people die most in the game? How many deaths are caused by the limiting of the playing field as opposed to deaths by other players?"), tags$ul(tags$li(HTML("An insight weâd like to get is based on your skills as a player, would you die more around these hotspots. ")))),
tags$li(HTML("<b>Question Two:</b> Is it wise for people to pick up the supply airdrop? "), tags$ul(tags$li(HTML("One strategy involved in playing the game is camping around valuable drops to lure unsuspecting players into such a zone to gain a positional advantage. ")))),
tags$li(HTML("<b>Question Three:</b>  what categories can players be divided into based on statistics such as damage done, kills, distance walked, etc. "), tags$ul(tags$li(HTML("For example, campers might walk less distance and have more damage, etc. Does adopting a particular strategy give a player a higher chance of winning? "))))
),
br(), br()
),
tabPanel("Time of Death", sidebarLayout (
sidebarPanel(
radioButtons("rb", "Choose one:",
choiceNames = list(
"Killers",
"Victims",
"All"
),
choiceValues = list(
"killers", "victims", "all"
)
),
textOutput("choice.kva"),br(),
hr(style="border: 1px grey solid")
), mainPanel(
h3("Place holder"),
img(src="victim_time_heat.gif"),
img(src="killer_time_heat.gif")
)
),
p ("Analysis")
),
tabPanel("Weapons", sidebarLayout (
sidebarPanel(
h4("Random Random")
), mainPanel(
h3("aaa")
)
))
)
)
runApp('~/INFO 201/FINAL ACTUAL/operaturtle/UI/ui.R')
runApp('~/INFO 201/FINAL ACTUAL/operaturtle/UI/ui.R')
runApp('~/INFO 201/FINAL ACTUAL/operaturtle/UI/ui.R')
gganimate(ggplot(data.map2) +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = time, cumulative = TRUE)) +
scale_color_gradientn(colours = rainbow(5)) +
xlab("X coordinate") +
ylab("Y coordinate") +
ggtitle("Victim Deaths Over Time || Elapsed time in minutes: "), "victim_time_heat.gif")
gganimate(ggplot(data.map2) +
annotation_custom(rasterGrob(img,
width = unit(1,"npc"),
height = unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = time, cumulative = TRUE)) +
scale_color_gradientn(colours = rainbow(5)) +
xlab("X coordinate") +
ylab("Y coordinate") +
ggtitle("Killer Deaths Over Time || Elapsed time in minutes: "), "killer_time_heat.gif")
ui <- fluidPage( theme = shinytheme("flatly"),
navbarPage("Play Unknown's Battleground",
tabPanel("Introduction", sidebarLayout (
sidebarPanel(
h4("Introduction To PUBG"),
p(' "PlayerUnkownâs Battlegrounds" (also noted as PUBG), a first and third-person shooter battle royale game. It matches 100 players to be drop onto an island, and those players shall fight until only one person remains. Players are allowed to play as a team of four or two, as well as playing solo. At the beginning of the game, from an airplane, players are airdropped onto the island where they can loot towns and buildings, for weapons, ammo, armor and first-aid. A blue-zone (as shown below) will appear a few minutes later to corral players closer and closer by dealing damage to anyone that stands outside the blue-zone. Additionally, there will be supply drops coming later on in the game, in which there will be legendary items.'),
hr(style="border: 1px grey solid"),
h4('Dataset Could be Downloaded From'),
# TODO: add the link here
a("Download Link - Kaggle", href="")
), mainPanel(
br(),
img(src='https://i.redd.it/djzln9jnhrez.jpg', height='50%', width='50%')
)
),
br(),br(),
h4("Questions We Proposed"),
tags$ol(
tags$li(HTML("<b>Question One:</b> Where do people die most in the game? How many deaths are caused by the limiting of the playing field as opposed to deaths by other players?"), tags$ul(tags$li(HTML("An insight weâd like to get is based on your skills as a player, would you die more around these hotspots. ")))),
tags$li(HTML("<b>Question Two:</b> Is it wise for people to pick up the supply airdrop? "), tags$ul(tags$li(HTML("One strategy involved in playing the game is camping around valuable drops to lure unsuspecting players into such a zone to gain a positional advantage. ")))),
tags$li(HTML("<b>Question Three:</b>  what categories can players be divided into based on statistics such as damage done, kills, distance walked, etc. "), tags$ul(tags$li(HTML("For example, campers might walk less distance and have more damage, etc. Does adopting a particular strategy give a player a higher chance of winning? "))))
),
br(), br()
),
tabPanel("Time of Death", sidebarLayout (
sidebarPanel(
radioButtons("rb", "Choose one:",
choiceNames = list(
"Killers",
"Victims",
"All"
),
choiceValues = list(
"killers", "victims", "all"
)
),
textOutput("choice.kva"),br(),
hr(style="border: 1px grey solid")
), mainPanel(
h3("Place holder"),
tags$video(src="Victim_time_heat.mp4", type="video/mp4", width="350px", height="350px", controls = "controls")
)
),
p ("Analysis")
),
tabPanel("Weapons", sidebarLayout (
sidebarPanel(
h4("Random Random")
), mainPanel(
h3("aaa")
)
))
)
)
runApp('~/INFO 201/FINAL ACTUAL/operaturtle/UI/ui.R')
runApp('~/INFO 201/FINAL ACTUAL/operaturtle/UI/ui.R')
runApp('~/INFO 201/FINAL ACTUAL/operaturtle/UI/ui.R')
runApp('~/INFO 201/FINAL ACTUAL/operaturtle/UI/ui.R')
gganimate(ggplot(data.map2) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.000001, cumulative = TRUE)) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "black", alpha = 0.000001, cumulative = TRUE)) +
theme_void() +
theme(plot.background = element_rect(fill = "black")),
"event_diff.gif")
gganimate(ggplot(data.map2) +
geom_point(aes(x = killer_x, y = killer_y, frame = time, color = "blue", alpha = 0.000001, cumulative = TRUE)) +
geom_point(aes(x = victim_x, y = victim_y, frame = time, color = "black", alpha = 0.000001, cumulative = TRUE)) +
theme_void() +
theme(plot.background = element_rect(fill = "black")),
"event_diff.mp4")
